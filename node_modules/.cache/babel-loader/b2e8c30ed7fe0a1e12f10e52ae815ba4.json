{"ast":null,"code":"var _jsxFileName = \"/Users/robertocaroca/Documents/GitHub/Formik-Form/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Formik, useField, FieldArray, Form } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_TODOS = [{\n  id: 1,\n  content: \"learn react\",\n  isCompleted: true\n}, {\n  id: 2,\n  content: \"learn react hooks\",\n  isCompleted: true\n}, {\n  id: 3,\n  content: \"learn formik\",\n  isCompleted: false\n}];\nconst TodoItem = _ref => {\n  _s();\n  let {\n    index\n  } = _ref;\n  // Binding `isCompleted` using index of todos array\n  const [completedField,, completedHelpers] = useField({\n    name: `todos[${index}].isCompleted`,\n    type: \"checkbox\"\n  });\n  // Binding `content` using index of todos array\n  const [contentField, contentMeta, contentHelpers] = useField(`todos[${index}].content`);\n  const onContentInput = e => {\n    contentHelpers.setValue(e.currentTarget.innerText);\n  };\n  const onContentBlur = () => {\n    contentHelpers.setTouched(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: [\"todo-item\", completedField.value ? \"completed\" : \"\"].join(\" \"),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      name: completedField.name,\n      checked: completedField.value,\n      onChange: _ref2 => {\n        let {\n          target\n        } = _ref2;\n        completedHelpers.setValue(target.checked);\n        // As type=checkbox doesn't call onBlur event\n        completedHelpers.setTouched(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      contentEditable: true,\n      className: \"todo-text\",\n      onInput: onContentInput,\n      onBlur: onContentBlur,\n      children: contentField.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoItem, \"h7+sbg9ZHzoLo7rYxIGih7XmKko=\", false, function () {\n  return [useField, useField];\n});\n_c = TodoItem;\nexport const TodoApp = () => /*#__PURE__*/_jsxDEV(Formik, {\n  initialValues: {\n    todos: INITIAL_TODOS\n  },\n  children: /*#__PURE__*/_jsxDEV(Form, {\n    children: /*#__PURE__*/_jsxDEV(FieldArray, {\n      name: \"todos\",\n      children: _ref3 => {\n        let {\n          form,\n          ...fieldArrayHelpers\n        } = _ref3;\n        const onAddClick = () => {\n          fieldArrayHelpers.push({\n            id: form.values.todos.length + 1,\n            content: \"\",\n            isCompleted: false\n          });\n        };\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onAddClick,\n            children: \"Add Item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), form.values.todos.map((todo, index) => /*#__PURE__*/_jsxDEV(TodoItem, {\n            index: index\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 3\n}, this);\n_c2 = TodoApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"TodoItem\");\n$RefreshReg$(_c2, \"TodoApp\");","map":{"version":3,"names":["React","Formik","useField","FieldArray","Form","jsxDEV","_jsxDEV","INITIAL_TODOS","id","content","isCompleted","TodoItem","_ref","_s","index","completedField","completedHelpers","name","type","contentField","contentMeta","contentHelpers","onContentInput","e","setValue","currentTarget","innerText","onContentBlur","setTouched","className","value","join","children","checked","onChange","_ref2","target","fileName","_jsxFileName","lineNumber","columnNumber","contentEditable","onInput","onBlur","_c","TodoApp","initialValues","todos","_ref3","form","fieldArrayHelpers","onAddClick","push","values","length","Fragment","onClick","map","todo","_c2","$RefreshReg$"],"sources":["/Users/robertocaroca/Documents/GitHub/Formik-Form/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport { Formik, useField, FieldArray, Form } from 'formik';\r\n\r\nconst INITIAL_TODOS = [\r\n  { id: 1, content: \"learn react\", isCompleted: true },\r\n  { id: 2, content: \"learn react hooks\", isCompleted: true },\r\n  { id: 3, content: \"learn formik\", isCompleted: false }\r\n];\r\n\r\nconst TodoItem = ({ index }) => {\r\n  // Binding `isCompleted` using index of todos array\r\n  const [completedField, , completedHelpers] = useField({ name: `todos[${index}].isCompleted`, type: \"checkbox\" });\r\n  // Binding `content` using index of todos array\r\n  const [contentField, contentMeta, contentHelpers] = useField(`todos[${index}].content`);\r\n  \r\n  const onContentInput = e => {\r\n    contentHelpers.setValue(e.currentTarget.innerText);\r\n  };\r\n  \r\n  const onContentBlur = () => {\r\n    contentHelpers.setTouched(true);\r\n  };\r\n\r\n  return (\r\n    <div className={[\"todo-item\", completedField.value ? \"completed\" : \"\"].join(\" \")}>\r\n      <input\r\n        type=\"checkbox\"\r\n        name={completedField.name}\r\n        checked={completedField.value}\r\n        onChange={({ target }) => {\r\n          completedHelpers.setValue(target.checked);\r\n          // As type=checkbox doesn't call onBlur event\r\n          completedHelpers.setTouched(true);\r\n        }}\r\n      />\r\n      <span\r\n        contentEditable={true}\r\n        className=\"todo-text\"\r\n        onInput={onContentInput}\r\n        onBlur={onContentBlur}\r\n      >\r\n        {contentField.value}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TodoApp = () => (\r\n  <Formik initialValues={{ todos: INITIAL_TODOS }}>\r\n    <Form>\r\n      {/* Pass name of the array, i.e. `todos` */}\r\n      <FieldArray name=\"todos\">\r\n        {({ form, ...fieldArrayHelpers }) => {\r\n          const onAddClick = () => {\r\n            fieldArrayHelpers.push({\r\n              id: form.values.todos.length + 1,\r\n              content: \"\",\r\n              isCompleted: false\r\n            });\r\n          };\r\n\r\n          return (\r\n            <React.Fragment>\r\n              <button onClick={onAddClick}>Add Item</button>\r\n              {form.values.todos.map((todo, index) => (\r\n                <TodoItem key={todo.id} index={index} />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </FieldArray>\r\n    </Form>\r\n  </Formik>\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}