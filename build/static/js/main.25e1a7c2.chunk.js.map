{"version":3,"sources":["TodoApp.jsx","index.js"],"names":["INITIAL_TODOS","id","content","isCompleted","TodoItem","_ref","index","_useField","useField","name","concat","type","_useField2","_slicedToArray","completedField","completedHelpers","_useField3","_useField4","contentField","contentHelpers","_jsxs","className","value","join","children","_jsx","checked","onChange","_ref2","target","setValue","setTouched","contentEditable","onInput","e","currentTarget","innerText","onBlur","TodoApp","Formik","initialValues","todos","Form","FieldArray","_ref3","form","fieldArrayHelpers","_objectWithoutProperties","_excluded","React","Fragment","onClick","push","values","length","setFieldValue","filter","todo","map","_ref4","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEMA,EAAgB,CACpB,CAAEC,GAAI,EAAGC,QAAS,cAAeC,aAAa,GAC9C,CAAEF,GAAI,EAAGC,QAAS,oBAAqBC,aAAa,GACpD,CAAEF,GAAI,EAAGC,QAAS,eAAgBC,aAAa,IAG3CC,EAAW,SAAHC,GAAmB,IAAbC,EAAKD,EAALC,MAClBC,EAA6CC,YAAS,CAAEC,KAAK,SAADC,OAAWJ,EAAK,iBAAiBK,KAAM,aAAaC,EAAAC,YAAAN,EAAA,GAAzGO,EAAcF,EAAA,GAAIG,EAAgBH,EAAA,GACzCI,EAAoDR,YAAS,SAADE,OAAUJ,EAAK,cAAYW,EAAAJ,YAAAG,EAAA,GAAhFE,EAAYD,EAAA,GAAeE,GAAFF,EAAA,GAAgBA,EAAA,IAUhD,OACEG,eAAA,OAAKC,UAAW,CAAC,YAAaP,EAAeQ,MAAQ,YAAc,IAAIC,KAAK,KAAKC,SAAA,CAC/EC,cAAA,SACEd,KAAK,WACLF,KAAMK,EAAeL,KACrBiB,QAASZ,EAAeQ,MACxBK,SAAU,SAAAC,GAAiB,IAAdC,EAAMD,EAANC,OACXd,EAAiBe,SAASD,EAAOH,SACjCX,EAAiBgB,YAAW,EAC9B,IAEFN,cAAA,QACEO,iBAAiB,EACjBX,UAAU,YACVY,QAtBiB,SAAAC,GACrBf,EAAeW,SAASI,EAAEC,cAAcC,UAC1C,EAqBMC,OAnBgB,WACpBlB,EAAeY,YAAW,EAC5B,EAiB4BP,SAErBN,EAAaI,UAItB,EAEagB,EAAU,WAAH,OAClBb,cAACc,IAAM,CAACC,cAAe,CAAEC,MAAOzC,GAAgBwB,SAC9CC,cAACiB,IAAI,CAAAlB,SACHC,cAACkB,IAAU,CAAClC,KAAK,QAAOe,SACrB,SAAAoB,GAAqC,IAAlCC,EAAID,EAAJC,KAASC,EAAiBC,YAAAH,EAAAI,GAe5B,OACE5B,eAAC6B,MAAMC,SAAQ,CAAA1B,SAAA,CACbC,cAAA,UAAQ0B,QAhBO,WACjBL,EAAkBM,KAAK,CACrBnD,GAAI4C,EAAKQ,OAAOZ,MAAMa,OACtBpD,QAAS,GACTC,aAAa,GAEjB,EAUgCqB,SAAC,aAC7BC,cAAA,UAAQ0B,QAVU,WACpBN,EAAKU,cACH,QACAV,EAAKQ,OAAOZ,MAAMe,QAAO,SAAAC,GAAI,OAAKA,EAAKtD,WAAW,IAEtD,EAKmCqB,SAAC,qBAC/BqB,EAAKQ,OAAOZ,MAAMiB,KAAI,SAAAC,EAASrD,GAAK,IAAXL,EAAE0D,EAAF1D,GAAE,OAC1BwB,cAACrB,EAAQ,CAAUE,MAAOA,GAAXL,EAAoB,MAI3C,OAGG,ECrEX2D,IAASC,OACPpC,cAACwB,IAAMa,WAAU,CAAAtC,SACfC,cAACa,EAAO,MAEVyB,SAASC,eAAe,Q","file":"static/js/main.25e1a7c2.chunk.js","sourcesContent":["import { Form, Formik, FieldArray, useField } from \"formik\";\n\nconst INITIAL_TODOS = [\n  { id: 1, content: \"learn react\", isCompleted: true },\n  { id: 2, content: \"learn react hooks\", isCompleted: true },\n  { id: 3, content: \"learn formik\", isCompleted: false },\n];\n\nconst TodoItem = ({ index }) => {\n  const [completedField, , completedHelpers] = useField({ name: `todos[${index}].isCompleted`, type: \"checkbox\" });\n  const [contentField, contentMeta, contentHelpers] = useField(`todos[${index}].content`);\n  \n  const onContentInput = e => {\n    contentHelpers.setValue(e.currentTarget.innerText);\n  };\n\n  const onContentBlur = () => {\n    contentHelpers.setTouched(true);\n  };\n\n  return (\n    <div className={[\"todo-item\", completedField.value ? \"completed\" : \"\"].join(\" \")}>\n      <input\n        type=\"checkbox\"\n        name={completedField.name}\n        checked={completedField.value}\n        onChange={({ target }) => {\n          completedHelpers.setValue(target.checked);\n          completedHelpers.setTouched(true);\n        }}\n      />\n      <span\n        contentEditable={true}\n        className=\"todo-text\"\n        onInput={onContentInput}\n        onBlur={onContentBlur}\n      >\n        {contentField.value}\n      </span>\n    </div>\n  );\n};\n\nexport const TodoApp = () => (\n  <Formik initialValues={{ todos: INITIAL_TODOS }}>\n    <Form>\n      <FieldArray name=\"todos\">\n        {({ form, ...fieldArrayHelpers }) => {\n          const onAddClick = () => {\n            fieldArrayHelpers.push({\n              id: form.values.todos.length,\n              content: \"\",\n              isCompleted: false,\n            });\n          };\n          const onRemoveClick = () => {\n            form.setFieldValue(\n              \"todos\",\n              form.values.todos.filter(todo => !todo.isCompleted)\n            );\n          };\n\n          return (\n            <React.Fragment>\n              <button onClick={onAddClick}>Add Item</button>\n              <button onClick={onRemoveClick}>Remove Completed</button>\n              {form.values.todos.map(({ id }, index) => (\n                <TodoItem key={id} index={index} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </FieldArray>\n    </Form>\n  </Formik>\n);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { TodoApp } from './TodoApp';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TodoApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}